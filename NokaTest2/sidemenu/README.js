
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var README = "<h1 id=\"svelte-sidebar\">Svelte Sidebar</h1>\n<p><img src=\"https://img.shields.io/npm/v/svelte_sidebar\" alt=\"npm\">\n<img src=\"https://img.shields.io/npm/l/svelte_sidebar\" alt=\"NPM\">\n<img src=\"https://badgen.net/bundlephobia/minzip/svelte_sidebar\" alt=\"Bundlephobia\">\n<a href=\"https://app.netlify.com/sites/admiring-kare-b5e53d/deploys\"><img src=\"https://api.netlify.com/api/v1/badges/e957276f-3f1c-413a-ad78-2b5894f82de9/deploy-status\" alt=\"Netlify Status\"></a>\n<a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/philipp-tailor/svelte_sidebar\"><img src=\"https://www.netlify.com/img/deploy/button.svg\" alt=\"Deploy playground to Netlify\"></a></p>\n<p>Sidebar navigation component written in svelte and compiled to an ES module of 8kb.</p>\n<p>Check it out <a href=\"https://sidebar.schneiders.space\">in the playground</a>.</p>\n<h2 id=\"what-it-is\">What it is</h2>\n<p>This sidebar navigation for web application replicates the experience of browsing the file tree in a code editor. The benefit is that the user can understand the application&#39;s information architecture (IA) at first glance, and can quickly jump between different hierarchy levels.\nThe UI pattern goes well with complex web applications with a lot of nested routes, especially for applications where the user can create data entries (e.g. where multiple users create projects, each of which is composed of multiple screens).</p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li>Usable in any web-app where the navigation routes are known / computable, as the sidebar is an ES module.</li>\n<li>Semantic, accessible DOM. Navigation is entirely possible with the keyboard. Animations are disabled when <code>prefers-reduced-motion</code> is set.</li>\n<li>The navigation hierarchy can be nested as deeply as required. Navigation links with sub-links are collapsible groups.</li>\n<li>Automatically un-collapses the active part of the navigation hierarchy and scrolls it into the viewport. Parent navigation items of the active navigation item are also highlighted compared to inactive navigation items.</li>\n<li>Every navigation link can be disabled.</li>\n<li>Just enough configuration possibilities for re-usability:<ul>\n<li>By default, the regular browser navigation occurs when the user clicks on a link (or presses <code>Enter</code>). A function can be passed as property to interrupt the regular navigation to handle navigation on the client side.</li>\n<li>Themeable: Colors (including hover styles), font sizing, and the minimum and maximum width (depending on the length of the names of navigation links).</li>\n</ul>\n</li>\n<li>h(n) performance when matching the active route in the navigation hierarchy, where <code>n</code> signifies the count of navigation links.</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<ul>\n<li><p>Without installation from <a href=\"https://www.skypack.dev/view/svelte_sidebar\">skypack</a>:</p>\n<pre><code class=\"language-js\">import Sidebar from &#39;https://cdn.skypack.dev/svelte_sidebar&#39;\n</code></pre>\n</li>\n<li><p>Yarn package manager: <code>yarn add svelte_sidebar</code></p>\n</li>\n<li><p>NPM package manager: <code>npm install --save svelte_sidebar</code></p>\n</li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<h3 id=\"on-any-web-site--app-as-es-module\">On any web site / app as ES module</h3>\n<pre><code class=\"language-html\">&lt;!-- index.html --&gt;\n&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n\n&lt;script type=&quot;module&quot;&gt;\nimport Sidebar from &#39;https://cdn.skypack.dev/svelte_sidebar&#39;\n\n  const props = {\n    routes: [\n        { &quot;name&quot;: &quot;Playground&quot;, &quot;route&quot;: &quot;/&quot; },\n        { &quot;name&quot;: &quot;Readme&quot;, &quot;route&quot;: &quot;/readme&quot;, &quot;childRoutes&quot;: [\n            { &quot;name&quot;: &quot;What it is&quot;, &quot;route&quot;: &quot;/readme#what-it-is&quot; }\n            ]\n        }\n    ],\n    activeUrl: &#39;/&#39;\n  }\n\n  new Sidebar({target: document.querySelector(&#39;#app&#39;), props})\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"in-a-svelte-web-app\">In a svelte web app</h3>\n<pre><code class=\"language-js\">// App.svelte\nimport Sidebar from &#39;svelte_sidebar&#39; // or from skypack\n\nconst props = {...}\n\n&lt;Sidebar {...props} /&gt;\n</code></pre>\n<h2 id=\"sidebar-component-properties\">Sidebar component properties</h2>\n<table>\n<thead>\n<tr>\n<th>property name</th>\n<th>required</th>\n<th>default</th>\n<th>description</th>\n<th>value type</th>\n<th>example value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>activeUrl</code></td>\n<td>no</td>\n<td><code>null</code></td>\n<td>The URL that is active in the application.</td>\n<td>string</td>\n<td><code>&#39;https://sidebar.</code><wbr><code>schneiders.space&#39;</code>. In a SPA, one would pass the string in from the router, or <code>window.location.path</code></td>\n</tr>\n<tr>\n<td><code>routes</code></td>\n<td>no</td>\n<td><code>[]</code></td>\n<td>This property contains the navigation hierarchy rendered by the sidebar. It&#39;s made up from an array of objects mapping URLs to navigation link names and defining the nesting of sub-routes. Not passing values is possible and could e.g. be used while fetching the data required to compute the menu hierarchy.</td>\n<td>array, as specified below</td>\n<td>see <code>src/exampleConfig/</code><wbr><code>routes.js</code></td>\n</tr>\n<tr>\n<td><code>onLinkClick</code></td>\n<td>no</td>\n<td><code>null</code></td>\n<td>Function that is executed when the user selects a navigation link. Prevents the regular navigation event. Therefore useful in applications with client side routing.</td>\n<td>function receiving the event</td>\n<td><code>(event) =&gt; alert(event.target.href)</code></td>\n</tr>\n<tr>\n<td><code>theme</code></td>\n<td>no</td>\n<td>see <code>defaultTheme</code> in <code>src/components/</code><wbr><code>Sidebar/</code><wbr><code>Sidebar.svelte</code></td>\n<td>Allows to customize the most important styles.</td>\n<td>object, as described below</td>\n<td><code>{ backgroundColor_nav: &#39;###ccc&#39; }</code></td>\n</tr>\n<tr>\n<td><code>open</code></td>\n<td>no</td>\n<td>true</td>\n<td>Allows to customize whether the navigation sidebar is open or horizontally minimized.</td>\n<td>boolean</td>\n<td><code>true</code>. To collapse the sidebar by default on smaller viewports, the result of an expression like <code>window.innerWidth &lt; 720px</code> could be passed.</td>\n</tr>\n<tr>\n<td><code>transitionEnabled</code></td>\n<td>no</td>\n<td><code>true</code></td>\n<td>Whether the route&#39;s content will transition in when being displayed. The default is <code>true</code>. <code>False</code> is less playful, and always used when <code>prefers-reduced-motion</code> is enabled.</td>\n<td><code>boolean</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><a href=\"https://sidebar.schneiders.space\">The playground</a> allows to play around with every property. It shows the sidebar on the left, and the component usage on the right. It&#39;s therefore the quickest way to find out how to use the component, and to see whether it covers your needs.</p>\n<h3 id=\"the-routes-array\">The <code>routes</code> array</h3>\n<p>As specified above, <code>routes</code> is an array of navigation route objects. Every one of those objects can have the attributes shown below (others are ignored):</p>\n<pre><code class=\"language-js\">{\n    name: &#39;Products&#39;,\n    route: &#39;/products&#39;,\n    disabled: true, /* optional */\n    collapseTree: true, /* optional */\n    childRoutes: [] /* optional */\n}\n</code></pre>\n<p>Following the description of a route object&#39;s attributes:</p>\n<table>\n<thead>\n<tr>\n<th>attribute name</th>\n<th>required</th>\n<th>default</th>\n<th>description</th>\n<th>value type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>´name´</td>\n<td>yes</td>\n<td>-</td>\n<td>The name under which the navigation link will be shown in the navigation hierarchy</td>\n<td><code>string</code></td>\n</tr>\n<tr>\n<td>´route´</td>\n<td>yes</td>\n<td>-</td>\n<td>The navigation links&#39; URL</td>\n<td><code>string</code></td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>no</td>\n<td><code>false</code></td>\n<td>Whether the link is selectable by the user. The default is <code>false</code>. <code>True</code> can make sense, e.g. if the user is not authorized to access a part of the application. If the route has child routes, the navigation link group can not be uncollapsed by the user.</td>\n<td><code>boolean</code></td>\n</tr>\n<tr>\n<td><code>collapseTree</code></td>\n<td>no</td>\n<td><code>false</code></td>\n<td>Allows to customize whether child routes are shown or vertically collapsed by default.</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td><code>childRoutes</code></td>\n<td>no</td>\n<td><code>[]</code></td>\n<td>An array of more route objects. As every route object can have child routes, there&#39;s theoretically no limit to the depth of the navigation hierarchy.</td>\n<td><code>array</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"the-theme-property\">The <code>theme</code> property</h3>\n<p>The theme property object takes the following attributes with matching CSS values:</p>\n<table>\n<thead>\n<tr>\n<th>attribute name</th>\n<th>default</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>backgroundColor_linkActive</code></td>\n<td>#F4442E</td>\n<td>Background color of the active link in the navigation hierarchy.</td>\n</tr>\n<tr>\n<td><code>backgroundColor_nav</code></td>\n<td>#555B6E</td>\n<td>Background color of the whole navigation sidebar.</td>\n</tr>\n<tr>\n<td><code>color_link</code></td>\n<td>#F7F7F2</td>\n<td>Text color of a navigation link in default state.</td>\n</tr>\n<tr>\n<td><code>color_linkHover</code></td>\n<td>#FCA311</td>\n<td>Text color of a navigation link when it&#39;s hovered upon or focused with the keyboard.</td>\n</tr>\n<tr>\n<td><code>fontSize</code></td>\n<td>1.2rem</td>\n<td>Font size of navigation links.</td>\n</tr>\n<tr>\n<td><code>maxWidth_nav</code></td>\n<td>20vw</td>\n<td>The maximum width of the navigation sidebar. Navigation links&#39; name will wrap into multiple lines, if their width in addition to their nesting would surpass <code>maxWidth_nav</code>.</td>\n</tr>\n<tr>\n<td><code>minWidth_nav</code></td>\n<td>320px</td>\n<td>Minimum width of the navigation sidebar. <code>minWidth_nav</code> is stronger than <code>maxWidth_nav</code>. If min width is larger than max width, min width will define the applied style.</td>\n</tr>\n<tr>\n<td><code>opacity_linkDisabled</code></td>\n<td>0.5</td>\n<td>Text opacity of navigation links, that have been specified to be disabled.</td>\n</tr>\n<tr>\n<td><code>opacity_linkInactive</code></td>\n<td>0.75</td>\n<td>Text opacity of navigation links that are not part of the navigation hierarchy that contains the active link.</td>\n</tr>\n</tbody></table>\n<p>The property names are CSS custom properties attached to the sidebar element.</p>\n<h2 id=\"slots\">Slots</h2>\n<p>The sidebar can also be passed children that are placed in pre-defined slots in the sidebar. There&#39;s a slot named <code>header</code> that is rendered above all navigation links (e.g. for company name and logo), and one below all navigation links called <code>footer</code>. On the playground, this slot is used to render the theme switcher.</p>\n<h2 id=\"license\">License</h2>\n<p>The code is licensed under MIT, see <code>LICENSE</code>.</p>\n<h2 id=\"contribution\">Contribution</h2>\n<p>This code-base is meant to be a one-time effort. I don&#39;t plan to extend it, unless there&#39;s actual usage and user feedback.</p>\n<p>Feel free to report issues, and/or to open PRs. I&#39;ll typically respond within a business day.</p>\n<p>If you want to contribute, you are welcome to pick one of the open issues.</p>\n";

export { README as default };
//# sourceMappingURL=README.js.map
