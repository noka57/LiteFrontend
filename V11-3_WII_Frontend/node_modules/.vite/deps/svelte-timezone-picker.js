import {
  slide
} from "./chunk-YO7P3DV6.js";
import "./chunk-M6MB33T7.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  add_render_callback,
  append_hydration_dev,
  append_styles,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_element,
  claim_space,
  claim_svg_element,
  claim_text,
  createEventDispatcher,
  create_bidirectional_transition,
  destroy_each,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  get_current_component,
  globals,
  group_outros,
  init,
  insert_hydration_dev,
  listen_dev,
  noop,
  onMount,
  run_all,
  safe_not_equal,
  set_data_dev,
  set_input_value,
  space,
  svg_element,
  text,
  transition_in,
  transition_out,
  validate_each_argument,
  validate_slots
} from "./chunk-DOYNZ6DE.js";
import "./chunk-TWLJ45QX.js";

// node_modules/svelte-timezone-picker/src/timezones.js
var timezones = {
  Africa: {
    "Africa/Abidjan": ["Abidjan", "+00:00", "+00:00"],
    "Africa/Accra": ["Accra", "+00:00", "+00:00"],
    "Africa/Addis_Ababa": ["Addis Ababa", "+03:00", "+03:00"],
    "Africa/Algiers": ["Algiers", "+01:00", "+01:00"],
    "Africa/Asmara": ["Asmara", "+03:00", "+03:00"],
    "Africa/Asmera": ["Asmera", "+03:00", "+03:00"],
    "Africa/Bamako": ["Bamako", "+00:00", "+00:00"],
    "Africa/Bangui": ["Bangui", "+01:00", "+01:00"],
    "Africa/Banjul": ["Banjul", "+00:00", "+00:00"],
    "Africa/Bissau": ["Bissau", "+00:00", "+00:00"],
    "Africa/Blantyre": ["Blantyre", "+02:00", "+02:00"],
    "Africa/Brazzaville": ["Brazzaville", "+01:00", "+01:00"],
    "Africa/Bujumbura": ["Bujumbura", "+02:00", "+02:00"],
    "Africa/Cairo": ["Cairo", "+02:00", "+03:00"],
    "Africa/Casablanca": ["Casablanca", "+00:00", "+01:00"],
    "Africa/Ceuta": ["Ceuta", "+01:00", "+02:00"],
    "Africa/Conakry": ["Conakry", "+00:00", "+00:00"],
    "Africa/Dakar": ["Dakar", "+00:00", "+00:00"],
    "Africa/Dar_es_Salaam": ["Dar es_Salaam", "+03:00", "+03:00"],
    "Africa/Djibouti": ["Djibouti", "+03:00", "+03:00"],
    "Africa/Douala": ["Douala", "+01:00", "+01:00"],
    "Africa/El_Aaiun": ["El Aaiun", "+00:00", "+01:00"],
    "Africa/Freetown": ["Freetown", "+00:00", "+00:00"],
    "Africa/Gaborone": ["Gaborone", "+02:00", "+02:00"],
    "Africa/Harare": ["Harare", "+02:00", "+02:00"],
    "Africa/Johannesburg": ["Johannesburg", "+02:00", "+02:00"],
    "Africa/Juba": ["Juba", "+03:00", "+03:00"],
    "Africa/Kampala": ["Kampala", "+03:00", "+03:00"],
    "Africa/Khartoum": ["Khartoum", "+03:00", "+03:00"],
    "Africa/Kigali": ["Kigali", "+02:00", "+02:00"],
    "Africa/Kinshasa": ["Kinshasa", "+01:00", "+01:00"],
    "Africa/Lagos": ["Lagos", "+01:00", "+01:00"],
    "Africa/Libreville": ["Libreville", "+01:00", "+01:00"],
    "Africa/Lome": ["Lome", "+00:00", "+00:00"],
    "Africa/Luanda": ["Luanda", "+01:00", "+01:00"],
    "Africa/Lubumbashi": ["Lubumbashi", "+02:00", "+02:00"],
    "Africa/Lusaka": ["Lusaka", "+02:00", "+02:00"],
    "Africa/Malabo": ["Malabo", "+01:00", "+01:00"],
    "Africa/Maputo": ["Maputo", "+02:00", "+02:00"],
    "Africa/Maseru": ["Maseru", "+02:00", "+02:00"],
    "Africa/Mbabane": ["Mbabane", "+02:00", "+02:00"],
    "Africa/Mogadishu": ["Mogadishu", "+03:00", "+03:00"],
    "Africa/Monrovia": ["Monrovia", "+00:00", "+00:00"],
    "Africa/Nairobi": ["Nairobi", "+03:00", "+03:00"],
    "Africa/Ndjamena": ["Ndjamena", "+01:00", "+01:00"],
    "Africa/Niamey": ["Niamey", "+01:00", "+01:00"],
    "Africa/Nouakchott": ["Nouakchott", "+00:00", "+00:00"],
    "Africa/Ouagadougou": ["Ouagadougou", "+00:00", "+00:00"],
    "Africa/Porto-Novo": ["Porto-Novo", "+01:00", "+01:00"],
    "Africa/Sao_Tome": ["Sao Tome", "+00:00", "+00:00"],
    "Africa/Timbuktu": ["Timbuktu", "+00:00", "+00:00"],
    "Africa/Tripoli": ["Tripoli", "+01:00", "+02:00"],
    "Africa/Tunis": ["Tunis", "+01:00", "+01:00"],
    "Africa/Windhoek": ["Windhoek", "+01:00", "+02:00"]
  },
  America: {
    "America/Adak": ["Adak", "-10:00", "-09:00"],
    "America/Anchorage": ["Anchorage", "-09:00", "-08:00"],
    "America/Anguilla": ["Anguilla", "-04:00", "-04:00"],
    "America/Antigua": ["Antigua", "-04:00", "-04:00"],
    "America/Araguaina": ["Araguaina", "-03:00", "-03:00"],
    "America/Argentina/Buenos_Aires": [
      "Buenos Aires, Argentina",
      "-03:00",
      "-03:00"
    ],
    "America/Argentina/Catamarca": ["Catamarca, Argentina", "-03:00", "-03:00"],
    "America/Argentina/ComodRivadavia": [
      "ComodRivadavia, Argentina",
      "-03:00",
      "-03:00"
    ],
    "America/Argentina/Cordoba": ["Cordoba, Argentina", "-03:00", "-03:00"],
    "America/Argentina/Jujuy": ["Jujuy, Argentina", "-03:00", "-03:00"],
    "America/Argentina/La_Rioja": ["La Rioja, Argentina", "-03:00", "-03:00"],
    "America/Argentina/Mendoza": ["Mendoza, Argentina", "-03:00", "-03:00"],
    "America/Argentina/Rio_Gallegos": [
      "Rio Gallegos, Argentina",
      "-03:00",
      "-03:00"
    ],
    "America/Argentina/Salta": ["Salta, Argentina", "-03:00", "-03:00"],
    "America/Argentina/San_Juan": ["San Juan, Argentina", "-03:00", "-03:00"],
    "America/Argentina/San_Luis": ["San Luis, Argentina", "-03:00", "-03:00"],
    "America/Argentina/Tucuman": ["Tucuman, Argentina", "-03:00", "-03:00"],
    "America/Argentina/Ushuaia": ["Ushuaia, Argentina", "-03:00", "-03:00"],
    "America/Aruba": ["Aruba", "-04:00", "-04:00"],
    "America/Asuncion": ["Asuncion", "-04:00", "-03:00"],
    "America/Atikokan": ["Atikokan", "-05:00", "-05:00"],
    "America/Atka": ["Atka", "-10:00", "-09:00"],
    "America/Bahia": ["Bahia", "-03:00", "-02:00"],
    "America/Bahia_Banderas": ["Bahia Banderas", "-06:00", "-05:00"],
    "America/Barbados": ["Barbados", "-04:00", "-04:00"],
    "America/Belem": ["Belem", "-03:00", "-03:00"],
    "America/Belize": ["Belize", "-06:00", "-06:00"],
    "America/Blanc-Sablon": ["Blanc-Sablon", "-04:00", "-04:00"],
    "America/Boa_Vista": ["Boa Vista", "-04:00", "-04:00"],
    "America/Bogota": ["Bogota", "-05:00", "-05:00"],
    "America/Boise": ["Boise", "-07:00", "-06:00"],
    "America/Buenos_Aires": ["Buenos Aires", "-03:00", "-03:00"],
    "America/Cambridge_Bay": ["Cambridge Bay", "-07:00", "-06:00"],
    "America/Campo_Grande": ["Campo Grande", "-04:00", "-03:00"],
    "America/Cancun": ["Cancun", "-06:00", "-05:00"],
    "America/Caracas": ["Caracas", "-04:30", "-04:30"],
    "America/Catamarca": ["Catamarca", "-03:00", "-03:00"],
    "America/Cayenne": ["Cayenne", "-03:00", "-03:00"],
    "America/Cayman": ["Cayman", "-05:00", "-05:00"],
    "America/Chicago": ["Chicago", "-06:00", "-05:00"],
    "America/Chihuahua": ["Chihuahua", "-07:00", "-06:00"],
    "America/Coral_Harbour": ["Coral Harbour", "-05:00", "-05:00"],
    "America/Cordoba": ["Cordoba", "-03:00", "-03:00"],
    "America/Costa_Rica": ["Costa Rica", "-06:00", "-06:00"],
    "America/Creston": ["Creston", "-07:00", "-07:00"],
    "America/Cuiaba": ["Cuiaba", "-04:00", "-03:00"],
    "America/Curacao": ["Curacao", "-04:00", "-04:00"],
    "America/Danmarkshavn": ["Danmarkshavn", "+00:00", "+00:00"],
    "America/Dawson": ["Dawson", "-08:00", "-07:00"],
    "America/Dawson_Creek": ["Dawson Creek", "-07:00", "-07:00"],
    "America/Denver": ["Denver", "-07:00", "-06:00"],
    "America/Detroit": ["Detroit", "-05:00", "-04:00"],
    "America/Dominica": ["Dominica", "-04:00", "-04:00"],
    "America/Edmonton": ["Edmonton", "-07:00", "-06:00"],
    "America/Eirunepe": ["Eirunepe", "-05:00", "-05:00"],
    "America/El_Salvador": ["El Salvador", "-06:00", "-06:00"],
    "America/Ensenada": ["Ensenada", "-08:00", "-07:00"],
    "America/Fort_Wayne": ["Fort Wayne", "-05:00", "-04:00"],
    "America/Fortaleza": ["Fortaleza", "-03:00", "-03:00"],
    "America/Glace_Bay": ["Glace Bay", "-04:00", "-03:00"],
    "America/Godthab": ["Godthab", "-03:00", "-02:00"],
    "America/Goose_Bay": ["Goose Bay", "-04:00", "-03:00"],
    "America/Grand_Turk": ["Grand Turk", "-05:00", "-04:00"],
    "America/Grenada": ["Grenada", "-04:00", "-04:00"],
    "America/Guadeloupe": ["Guadeloupe", "-04:00", "-04:00"],
    "America/Guatemala": ["Guatemala", "-06:00", "-06:00"],
    "America/Guayaquil": ["Guayaquil", "-05:00", "-05:00"],
    "America/Guyana": ["Guyana", "-04:00", "-04:00"],
    "America/Halifax": ["Halifax", "-04:00", "-03:00"],
    "America/Havana": ["Havana", "-05:00", "-04:00"],
    "America/Hermosillo": ["Hermosillo", "-07:00", "-07:00"],
    "America/Indiana/Indianapolis": [
      "Indianapolis, Indiana",
      "-05:00",
      "-04:00"
    ],
    "America/Indiana/Knox": ["Knox, Indiana", "-06:00", "-05:00"],
    "America/Indiana/Marengo": ["Marengo, Indiana", "-05:00", "-04:00"],
    "America/Indiana/Petersburg": ["Petersburg, Indiana", "-05:00", "-04:00"],
    "America/Indiana/Tell_City": ["Tell City, Indiana", "-06:00", "-05:00"],
    "America/Indiana/Valparaiso": ["Valparaiso, Indiana", "-06:00", "-05:00"],
    "America/Indiana/Vevay": ["Vevay, Indiana", "-05:00", "-04:00"],
    "America/Indiana/Vincennes": ["Vincennes, Indiana", "-05:00", "-04:00"],
    "America/Indiana/Winamac": ["Winamac, Indiana", "-05:00", "-04:00"],
    "America/Indianapolis": ["Indianapolis", "-05:00", "-04:00"],
    "America/Inuvik": ["Inuvik", "-07:00", "-06:00"],
    "America/Iqaluit": ["Iqaluit", "-05:00", "-04:00"],
    "America/Jamaica": ["Jamaica", "-05:00", "-05:00"],
    "America/Jujuy": ["Jujuy", "-03:00", "-03:00"],
    "America/Juneau": ["Juneau", "-09:00", "-08:00"],
    "America/Kentucky/Louisville": ["Louisville, Kentucky", "-05:00", "-04:00"],
    "America/Kentucky/Monticello": ["Monticello, Kentucky", "-05:00", "-04:00"],
    "America/Knox_IN": ["Knox IN", "-06:00", "-05:00"],
    "America/Kralendijk": ["Kralendijk", "-04:00", "-04:00"],
    "America/La_Paz": ["La Paz", "-04:00", "-04:00"],
    "America/Lima": ["Lima", "-05:00", "-05:00"],
    "America/Los_Angeles": ["Los Angeles", "-08:00", "-07:00"],
    "America/Louisville": ["Louisville", "-05:00", "-04:00"],
    "America/Lower_Princes": ["Lower Princes", "-04:00", "-04:00"],
    "America/Maceio": ["Maceio", "-03:00", "-03:00"],
    "America/Managua": ["Managua", "-06:00", "-06:00"],
    "America/Manaus": ["Manaus", "-04:00", "-04:00"],
    "America/Marigot": ["Marigot", "-04:00", "-04:00"],
    "America/Martinique": ["Martinique", "-04:00", "-04:00"],
    "America/Matamoros": ["Matamoros", "-06:00", "-05:00"],
    "America/Mazatlan": ["Mazatlan", "-07:00", "-06:00"],
    "America/Mendoza": ["Mendoza", "-03:00", "-03:00"],
    "America/Menominee": ["Menominee", "-06:00", "-05:00"],
    "America/Merida": ["Merida", "-06:00", "-05:00"],
    "America/Metlakatla": ["Metlakatla", "-08:00", "-08:00"],
    "America/Mexico_City": ["Mexico City", "-06:00", "-05:00"],
    "America/Miquelon": ["Miquelon", "-03:00", "-02:00"],
    "America/Moncton": ["Moncton", "-04:00", "-03:00"],
    "America/Monterrey": ["Monterrey", "-06:00", "-05:00"],
    "America/Montevideo": ["Montevideo", "-03:00", "-02:00"],
    "America/Montreal": ["Montreal", "-05:00", "-04:00"],
    "America/Montserrat": ["Montserrat", "-04:00", "-04:00"],
    "America/Nassau": ["Nassau", "-05:00", "-04:00"],
    "America/New_York": ["New York", "-05:00", "-04:00"],
    "America/Nipigon": ["Nipigon", "-05:00", "-04:00"],
    "America/Nome": ["Nome", "-09:00", "-08:00"],
    "America/Noronha": ["Noronha", "-02:00", "-02:00"],
    "America/North_Dakota/Beulah": ["Beulah, North Dakota", "-06:00", "-05:00"],
    "America/North_Dakota/Center": ["Center, North Dakota", "-06:00", "-05:00"],
    "America/North_Dakota/New_Salem": [
      "New Salem, North Dakota",
      "-06:00",
      "-05:00"
    ],
    "America/Ojinaga": ["Ojinaga", "-07:00", "-06:00"],
    "America/Panama": ["Panama", "-05:00", "-05:00"],
    "America/Pangnirtung": ["Pangnirtung", "-05:00", "-04:00"],
    "America/Paramaribo": ["Paramaribo", "-03:00", "-03:00"],
    "America/Phoenix": ["Phoenix", "-07:00", "-07:00"],
    "America/Port-au-Prince": ["Port-au-Prince", "-05:00", "-04:00"],
    "America/Port_of_Spain": ["Port of_Spain", "-04:00", "-04:00"],
    "America/Porto_Acre": ["Porto Acre", "-05:00", "-05:00"],
    "America/Porto_Velho": ["Porto Velho", "-04:00", "-04:00"],
    "America/Puerto_Rico": ["Puerto Rico", "-04:00", "-04:00"],
    "America/Rainy_River": ["Rainy River", "-06:00", "-05:00"],
    "America/Rankin_Inlet": ["Rankin Inlet", "-06:00", "-05:00"],
    "America/Recife": ["Recife", "-03:00", "-03:00"],
    "America/Regina": ["Regina", "-06:00", "-06:00"],
    "America/Resolute": ["Resolute", "-06:00", "-05:00"],
    "America/Rio_Branco": ["Rio Branco", "-05:00", "-05:00"],
    "America/Rosario": ["Rosario", "-03:00", "-03:00"],
    "America/Santa_Isabel": ["Santa Isabel", "-08:00", "-07:00"],
    "America/Santarem": ["Santarem", "-03:00", "-03:00"],
    "America/Santiago": ["Santiago", "-04:00", "-03:00"],
    "America/Santo_Domingo": ["Santo Domingo", "-04:00", "-04:00"],
    "America/Sao_Paulo": ["Sao Paulo", "-03:00", "-02:00"],
    "America/Scoresbysund": ["Scoresbysund", "-01:00", "+00:00"],
    "America/Shiprock": ["Shiprock", "-07:00", "-06:00"],
    "America/Sitka": ["Sitka", "-09:00", "-08:00"],
    "America/St_Barthelemy": ["St Barthelemy", "-04:00", "-04:00"],
    "America/St_Johns": ["St Johns", "-03:30", "-02:30"],
    "America/St_Kitts": ["St Kitts", "-04:00", "-04:00"],
    "America/St_Lucia": ["St Lucia", "-04:00", "-04:00"],
    "America/St_Thomas": ["St Thomas", "-04:00", "-04:00"],
    "America/St_Vincent": ["St Vincent", "-04:00", "-04:00"],
    "America/Swift_Current": ["Swift Current", "-06:00", "-06:00"],
    "America/Tegucigalpa": ["Tegucigalpa", "-06:00", "-06:00"],
    "America/Thule": ["Thule", "-04:00", "-03:00"],
    "America/Thunder_Bay": ["Thunder Bay", "-05:00", "-04:00"],
    "America/Tijuana": ["Tijuana", "-08:00", "-07:00"],
    "America/Toronto": ["Toronto", "-05:00", "-04:00"],
    "America/Tortola": ["Tortola", "-04:00", "-04:00"],
    "America/Vancouver": ["Vancouver", "-08:00", "-07:00"],
    "America/Virgin": ["Virgin", "-04:00", "-04:00"],
    "America/Whitehorse": ["Whitehorse", "-08:00", "-07:00"],
    "America/Winnipeg": ["Winnipeg", "-06:00", "-05:00"],
    "America/Yakutat": ["Yakutat", "-09:00", "-08:00"],
    "America/Yellowknife": ["Yellowknife", "-07:00", "-06:00"]
  },
  Antarctica: {
    "Antarctica/Casey": ["Casey", "+11:00", "+08:00"],
    "Antarctica/Davis": ["Davis", "+05:00", "+07:00"],
    "Antarctica/DumontDUrville": ["DumontDUrville", "+10:00", "+10:00"],
    "Antarctica/Macquarie": ["Macquarie", "+11:00", "+11:00"],
    "Antarctica/Mawson": ["Mawson", "+05:00", "+05:00"],
    "Antarctica/McMurdo": ["McMurdo", "+12:00", "+13:00"],
    "Antarctica/Palmer": ["Palmer", "-04:00", "-03:00"],
    "Antarctica/Rothera": ["Rothera", "-03:00", "-03:00"],
    "Antarctica/South_Pole": ["South Pole", "+12:00", "+13:00"],
    "Antarctica/Syowa": ["Syowa", "+03:00", "+03:00"],
    "Antarctica/Troll": ["Troll", "+00:00", "+02:00"],
    "Antarctica/Vostok": ["Vostok", "+06:00", "+06:00"]
  },
  Arctic: { "Arctic/Longyearbyen": ["Longyearbyen", "+01:00", "+02:00"] },
  Asia: {
    "Asia/Aden": ["Aden", "+03:00", "+03:00"],
    "Asia/Almaty": ["Almaty", "+06:00", "+06:00"],
    "Asia/Amman": ["Amman", "+02:00", "+03:00"],
    "Asia/Anadyr": ["Anadyr", "+12:00", "+12:00"],
    "Asia/Aqtau": ["Aqtau", "+05:00", "+05:00"],
    "Asia/Aqtobe": ["Aqtobe", "+05:00", "+05:00"],
    "Asia/Ashgabat": ["Ashgabat", "+05:00", "+05:00"],
    "Asia/Ashkhabad": ["Ashkhabad", "+05:00", "+05:00"],
    "Asia/Baghdad": ["Baghdad", "+03:00", "+03:00"],
    "Asia/Bahrain": ["Bahrain", "+03:00", "+03:00"],
    "Asia/Baku": ["Baku", "+04:00", "+05:00"],
    "Asia/Bangkok": ["Bangkok", "+07:00", "+07:00"],
    "Asia/Beirut": ["Beirut", "+02:00", "+03:00"],
    "Asia/Bishkek": ["Bishkek", "+06:00", "+06:00"],
    "Asia/Brunei": ["Brunei", "+08:00", "+08:00"],
    "Asia/Calcutta": ["Calcutta", "+05:30", "+05:30"],
    "Asia/Choibalsan": ["Choibalsan", "+08:00", "+08:00"],
    "Asia/Chongqing": ["Chongqing", "+08:00", "+08:00"],
    "Asia/Chungking": ["Chungking", "+08:00", "+08:00"],
    "Asia/Colombo": ["Colombo", "+05:30", "+05:30"],
    "Asia/Dacca": ["Dacca", "+06:00", "+06:00"],
    "Asia/Damascus": ["Damascus", "+02:00", "+03:00"],
    "Asia/Dhaka": ["Dhaka", "+06:00", "+06:00"],
    "Asia/Dili": ["Dili", "+09:00", "+09:00"],
    "Asia/Dubai": ["Dubai", "+04:00", "+04:00"],
    "Asia/Dushanbe": ["Dushanbe", "+05:00", "+05:00"],
    "Asia/Gaza": ["Gaza", "+02:00", "+03:00"],
    "Asia/Harbin": ["Harbin", "+08:00", "+08:00"],
    "Asia/Hebron": ["Hebron", "+02:00", "+03:00"],
    "Asia/Ho_Chi_Minh": ["Ho Chi_Minh", "+07:00", "+07:00"],
    "Asia/Hong_Kong": ["Hong Kong", "+08:00", "+08:00"],
    "Asia/Hovd": ["Hovd", "+07:00", "+07:00"],
    "Asia/Irkutsk": ["Irkutsk", "+08:00", "+08:00"],
    "Asia/Istanbul": ["Istanbul", "+02:00", "+03:00"],
    "Asia/Jakarta": ["Jakarta", "+07:00", "+07:00"],
    "Asia/Jayapura": ["Jayapura", "+09:00", "+09:00"],
    "Asia/Jerusalem": ["Jerusalem", "+02:00", "+03:00"],
    "Asia/Kabul": ["Kabul", "+04:30", "+04:30"],
    "Asia/Kamchatka": ["Kamchatka", "+12:00", "+12:00"],
    "Asia/Karachi": ["Karachi", "+05:00", "+05:00"],
    "Asia/Kashgar": ["Kashgar", "+08:00", "+08:00"],
    "Asia/Kathmandu": ["Kathmandu", "+05:45", "+05:45"],
    "Asia/Katmandu": ["Katmandu", "+05:45", "+05:45"],
    "Asia/Khandyga": ["Khandyga", "+09:00", "+09:00"],
    "Asia/Kolkata": ["Kolkata", "+05:30", "+05:30"],
    "Asia/Krasnoyarsk": ["Krasnoyarsk", "+07:00", "+07:00"],
    "Asia/Kuala_Lumpur": ["Kuala Lumpur", "+08:00", "+08:00"],
    "Asia/Kuching": ["Kuching", "+08:00", "+08:00"],
    "Asia/Kuwait": ["Kuwait", "+03:00", "+03:00"],
    "Asia/Macao": ["Macao", "+08:00", "+08:00"],
    "Asia/Macau": ["Macau", "+08:00", "+08:00"],
    "Asia/Magadan": ["Magadan", "+10:00", "+10:00"],
    "Asia/Makassar": ["Makassar", "+08:00", "+08:00"],
    "Asia/Manila": ["Manila", "+08:00", "+08:00"],
    "Asia/Muscat": ["Muscat", "+04:00", "+04:00"],
    "Asia/Nicosia": ["Nicosia", "+02:00", "+03:00"],
    "Asia/Novokuznetsk": ["Novokuznetsk", "+07:00", "+07:00"],
    "Asia/Novosibirsk": ["Novosibirsk", "+06:00", "+06:00"],
    "Asia/Omsk": ["Omsk", "+06:00", "+06:00"],
    "Asia/Oral": ["Oral", "+05:00", "+05:00"],
    "Asia/Phnom_Penh": ["Phnom Penh", "+07:00", "+07:00"],
    "Asia/Pontianak": ["Pontianak", "+07:00", "+07:00"],
    "Asia/Pyongyang": ["Pyongyang", "+09:00", "+09:00"],
    "Asia/Qatar": ["Qatar", "+03:00", "+03:00"],
    "Asia/Qyzylorda": ["Qyzylorda", "+06:00", "+06:00"],
    "Asia/Rangoon": ["Rangoon", "+06:30", "+06:30"],
    "Asia/Riyadh": ["Riyadh", "+03:00", "+03:00"],
    "Asia/Saigon": ["Saigon", "+07:00", "+07:00"],
    "Asia/Sakhalin": ["Sakhalin", "+11:00", "+11:00"],
    "Asia/Samarkand": ["Samarkand", "+05:00", "+05:00"],
    "Asia/Seoul": ["Seoul", "+09:00", "+09:00"],
    "Asia/Shanghai": ["Shanghai", "+08:00", "+08:00"],
    "Asia/Singapore": ["Singapore", "+08:00", "+08:00"],
    "Asia/Taipei": ["Taipei", "+08:00", "+08:00"],
    "Asia/Tashkent": ["Tashkent", "+05:00", "+05:00"],
    "Asia/Tbilisi": ["Tbilisi", "+04:00", "+04:00"],
    "Asia/Tehran": ["Tehran", "+03:30", "+04:30"],
    "Asia/Tel_Aviv": ["Tel Aviv", "+02:00", "+03:00"],
    "Asia/Thimbu": ["Thimbu", "+06:00", "+06:00"],
    "Asia/Thimphu": ["Thimphu", "+06:00", "+06:00"],
    "Asia/Tokyo": ["Tokyo", "+09:00", "+09:00"],
    "Asia/Ujung_Pandang": ["Ujung Pandang", "+08:00", "+08:00"],
    "Asia/Ulaanbaatar": ["Ulaanbaatar", "+08:00", "+08:00"],
    "Asia/Ulan_Bator": ["Ulan Bator", "+08:00", "+08:00"],
    "Asia/Urumqi": ["Urumqi", "+08:00", "+08:00"],
    "Asia/Ust-Nera": ["Ust-Nera", "+10:00", "+10:00"],
    "Asia/Vientiane": ["Vientiane", "+07:00", "+07:00"],
    "Asia/Vladivostok": ["Vladivostok", "+10:00", "+10:00"],
    "Asia/Yakutsk": ["Yakutsk", "+09:00", "+09:00"],
    "Asia/Yekaterinburg": ["Yekaterinburg", "+05:00", "+05:00"],
    "Asia/Yerevan": ["Yerevan", "+04:00", "+04:00"]
  },
  Atlantic: {
    "Atlantic/Azores": ["Azores", "-01:00", "+00:00"],
    "Atlantic/Bermuda": ["Bermuda", "-04:00", "-03:00"],
    "Atlantic/Canary": ["Canary", "+00:00", "+01:00"],
    "Atlantic/Cape_Verde": ["Cape Verde", "-01:00", "-01:00"],
    "Atlantic/Faeroe": ["Faeroe", "+00:00", "+01:00"],
    "Atlantic/Faroe": ["Faroe", "+00:00", "+01:00"],
    "Atlantic/Jan_Mayen": ["Jan Mayen", "+01:00", "+02:00"],
    "Atlantic/Madeira": ["Madeira", "+00:00", "+01:00"],
    "Atlantic/Reykjavik": ["Reykjavik", "+00:00", "+00:00"],
    "Atlantic/South_Georgia": ["South Georgia", "-02:00", "-02:00"],
    "Atlantic/St_Helena": ["St Helena", "+00:00", "+00:00"],
    "Atlantic/Stanley": ["Stanley", "-03:00", "-03:00"]
  },
  Australia: {
    "Australia/ACT": ["ACT", "+10:00", "+11:00"],
    "Australia/Adelaide": ["Adelaide", "+09:30", "+10:30"],
    "Australia/Brisbane": ["Brisbane", "+10:00", "+10:00"],
    "Australia/Broken_Hill": ["Broken Hill", "+09:30", "+10:30"],
    "Australia/Canberra": ["Canberra", "+10:00", "+11:00"],
    "Australia/Currie": ["Currie", "+10:00", "+11:00"],
    "Australia/Darwin": ["Darwin", "+09:30", "+09:30"],
    "Australia/Eucla": ["Eucla", "+08:45", "+08:45"],
    "Australia/Hobart": ["Hobart", "+10:00", "+11:00"],
    "Australia/LHI": ["LHI", "+10:30", "+11:00"],
    "Australia/Lindeman": ["Lindeman", "+10:00", "+10:00"],
    "Australia/Lord_Howe": ["Lord Howe", "+10:30", "+11:00"],
    "Australia/Melbourne": ["Melbourne", "+10:00", "+11:00"],
    "Australia/NSW": ["NSW", "+10:00", "+11:00"],
    "Australia/North": ["North", "+09:30", "+09:30"],
    "Australia/Perth": ["Perth", "+08:00", "+08:00"],
    "Australia/Queensland": ["Queensland", "+10:00", "+10:00"],
    "Australia/South": ["South", "+09:30", "+10:30"],
    "Australia/Sydney": ["Sydney", "+10:00", "+11:00"],
    "Australia/Tasmania": ["Tasmania", "+10:00", "+11:00"],
    "Australia/Victoria": ["Victoria", "+10:00", "+11:00"],
    "Australia/West": ["West", "+08:00", "+08:00"],
    "Australia/Yancowinna": ["Yancowinna", "+09:30", "+10:30"]
  },
  Brazil: {
    "Brazil/Acre": ["Acre", "-05:00", "-05:00"],
    "Brazil/DeNoronha": ["DeNoronha", "-02:00", "-02:00"],
    "Brazil/East": ["East", "-03:00", "-02:00"],
    "Brazil/West": ["West", "-04:00", "-04:00"]
  },
  Canada: {
    "Canada/Atlantic": ["Atlantic", "-04:00", "-03:00"],
    "Canada/Central": ["Central", "-06:00", "-05:00"],
    "Canada/East-Saskatchewan": ["East-Saskatchewan", "-06:00", "-06:00"],
    "Canada/Eastern": ["Eastern", "-05:00", "-04:00"],
    "Canada/Mountain": ["Mountain", "-07:00", "-06:00"],
    "Canada/Newfoundland": ["Newfoundland", "-03:30", "-02:30"],
    "Canada/Saskatchewan": ["Saskatchewan", "-06:00", "-06:00"],
    "Canada/Yukon": ["Yukon", "-08:00", "-07:00"]
  },
  Chile: {
    "Chile/Continental": ["Continental", "-04:00", "-03:00"],
    "Chile/EasterIsland": ["EasterIsland", "-06:00", "-05:00"]
  },
  Other: {
    Cuba: ["Cuba", "-05:00", "-04:00"],
    Egypt: ["Egypt", "+02:00", "+02:00"],
    Eire: ["Eire", "+00:00", "+01:00"],
    GB: ["GB", "+00:00", "+01:00"],
    "GB-Eire": ["GB-Eire", "+00:00", "+01:00"],
    GMT: ["GMT", "+00:00", "+00:00"],
    "GMT+0": ["GMT+0", "+00:00", "+00:00"],
    "GMT-0": ["GMT-0", "+00:00", "+00:00"],
    GMT0: ["GMT0", "+00:00", "+00:00"],
    Greenwich: ["Greenwich", "+00:00", "+00:00"],
    Hongkong: ["Hongkong", "+08:00", "+08:00"],
    Iceland: ["Iceland", "+00:00", "+00:00"],
    Iran: ["Iran", "+03:30", "+04:30"],
    Israel: ["Israel", "+02:00", "+03:00"],
    Jamaica: ["Jamaica", "-05:00", "-05:00"],
    Japan: ["Japan", "+09:00", "+09:00"],
    Kwajalein: ["Kwajalein", "+12:00", "+12:00"],
    Libya: ["Libya", "+02:00", "+01:00"],
    NZ: ["NZ", "+12:00", "+13:00"],
    "NZ-CHAT": ["NZ-CHAT", "+12:45", "+13:45"],
    Navajo: ["Navajo", "-07:00", "-06:00"],
    PRC: ["PRC", "+08:00", "+08:00"],
    Poland: ["Poland", "+01:00", "+02:00"],
    Portugal: ["Portugal", "+00:00", "+01:00"],
    ROC: ["ROC", "+08:00", "+08:00"],
    ROK: ["ROK", "+09:00", "+09:00"],
    Singapore: ["Singapore", "+08:00", "+08:00"],
    Turkey: ["Turkey", "+02:00", "+03:00"],
    UCT: ["UCT", "+00:00", "+00:00"],
    UTC: ["UTC", "+00:00", "+00:00"],
    Universal: ["Universal", "+00:00", "+00:00"],
    "W-SU": ["W-SU", "+03:00", "+03:00"],
    Zulu: ["Zulu", "+00:00", "+00:00"]
  },
  Etc: {
    "Etc/GMT": ["GMT", "+00:00", "+00:00"],
    "Etc/GMT+0": ["GMT+0", "+00:00", "+00:00"],
    "Etc/UCT": ["UCT", "+00:00", "+00:00"],
    "Etc/UTC": ["UTC", "+00:00", "+00:00"],
    "Etc/Universal": ["Universal", "+00:00", "+00:00"],
    "Etc/Zulu": ["Zulu", "+00:00", "+00:00"]
  },
  Europe: {
    "Europe/Amsterdam": ["Amsterdam", "+01:00", "+02:00"],
    "Europe/Andorra": ["Andorra", "+01:00", "+02:00"],
    "Europe/Athens": ["Athens", "+02:00", "+03:00"],
    "Europe/Belfast": ["Belfast", "+00:00", "+01:00"],
    "Europe/Belgrade": ["Belgrade", "+01:00", "+02:00"],
    "Europe/Berlin": ["Berlin", "+01:00", "+02:00"],
    "Europe/Bratislava": ["Bratislava", "+01:00", "+02:00"],
    "Europe/Brussels": ["Brussels", "+01:00", "+02:00"],
    "Europe/Bucharest": ["Bucharest", "+02:00", "+03:00"],
    "Europe/Budapest": ["Budapest", "+01:00", "+02:00"],
    "Europe/Busingen": ["Busingen", "+01:00", "+02:00"],
    "Europe/Chisinau": ["Chisinau", "+02:00", "+03:00"],
    "Europe/Copenhagen": ["Copenhagen", "+01:00", "+02:00"],
    "Europe/Dublin": ["Dublin", "+00:00", "+01:00"],
    "Europe/Gibraltar": ["Gibraltar", "+01:00", "+02:00"],
    "Europe/Guernsey": ["Guernsey", "+00:00", "+01:00"],
    "Europe/Helsinki": ["Helsinki", "+02:00", "+03:00"],
    "Europe/Isle_of_Man": ["Isle of_Man", "+00:00", "+01:00"],
    "Europe/Istanbul": ["Istanbul", "+02:00", "+03:00"],
    "Europe/Jersey": ["Jersey", "+00:00", "+01:00"],
    "Europe/Kaliningrad": ["Kaliningrad", "+02:00", "+02:00"],
    "Europe/Kiev": ["Kiev", "+02:00", "+03:00"],
    "Europe/Lisbon": ["Lisbon", "+00:00", "+01:00"],
    "Europe/Ljubljana": ["Ljubljana", "+01:00", "+02:00"],
    "Europe/London": ["London", "+00:00", "+01:00"],
    "Europe/Luxembourg": ["Luxembourg", "+01:00", "+02:00"],
    "Europe/Madrid": ["Madrid", "+01:00", "+02:00"],
    "Europe/Malta": ["Malta", "+01:00", "+02:00"],
    "Europe/Mariehamn": ["Mariehamn", "+02:00", "+03:00"],
    "Europe/Minsk": ["Minsk", "+03:00", "+03:00"],
    "Europe/Monaco": ["Monaco", "+01:00", "+02:00"],
    "Europe/Moscow": ["Moscow", "+03:00", "+03:00"],
    "Europe/Nicosia": ["Nicosia", "+02:00", "+03:00"],
    "Europe/Oslo": ["Oslo", "+01:00", "+02:00"],
    "Europe/Paris": ["Paris", "+01:00", "+02:00"],
    "Europe/Podgorica": ["Podgorica", "+01:00", "+02:00"],
    "Europe/Prague": ["Prague", "+01:00", "+02:00"],
    "Europe/Riga": ["Riga", "+02:00", "+03:00"],
    "Europe/Rome": ["Rome", "+01:00", "+02:00"],
    "Europe/Samara": ["Samara", "+04:00", "+04:00"],
    "Europe/San_Marino": ["San Marino", "+01:00", "+02:00"],
    "Europe/Sarajevo": ["Sarajevo", "+01:00", "+02:00"],
    "Europe/Simferopol": ["Simferopol", "+03:00", "+03:00"],
    "Europe/Skopje": ["Skopje", "+01:00", "+02:00"],
    "Europe/Sofia": ["Sofia", "+02:00", "+03:00"],
    "Europe/Stockholm": ["Stockholm", "+01:00", "+02:00"],
    "Europe/Tallinn": ["Tallinn", "+02:00", "+03:00"],
    "Europe/Tirane": ["Tirane", "+01:00", "+02:00"],
    "Europe/Tiraspol": ["Tiraspol", "+02:00", "+03:00"],
    "Europe/Uzhgorod": ["Uzhgorod", "+02:00", "+03:00"],
    "Europe/Vaduz": ["Vaduz", "+01:00", "+02:00"],
    "Europe/Vatican": ["Vatican", "+01:00", "+02:00"],
    "Europe/Vienna": ["Vienna", "+01:00", "+02:00"],
    "Europe/Vilnius": ["Vilnius", "+02:00", "+03:00"],
    "Europe/Volgograd": ["Volgograd", "+03:00", "+03:00"],
    "Europe/Warsaw": ["Warsaw", "+01:00", "+02:00"],
    "Europe/Zagreb": ["Zagreb", "+01:00", "+02:00"],
    "Europe/Zaporozhye": ["Zaporozhye", "+02:00", "+03:00"],
    "Europe/Zurich": ["Zurich", "+01:00", "+02:00"]
  },
  Indian: {
    "Indian/Antananarivo": ["Antananarivo", "+03:00", "+03:00"],
    "Indian/Chagos": ["Chagos", "+06:00", "+06:00"],
    "Indian/Christmas": ["Christmas", "+07:00", "+07:00"],
    "Indian/Cocos": ["Cocos", "+06:30", "+06:30"],
    "Indian/Comoro": ["Comoro", "+03:00", "+03:00"],
    "Indian/Kerguelen": ["Kerguelen", "+05:00", "+05:00"],
    "Indian/Mahe": ["Mahe", "+04:00", "+04:00"],
    "Indian/Maldives": ["Maldives", "+05:00", "+05:00"],
    "Indian/Mauritius": ["Mauritius", "+04:00", "+04:00"],
    "Indian/Mayotte": ["Mayotte", "+03:00", "+03:00"],
    "Indian/Reunion": ["Reunion", "+04:00", "+04:00"]
  },
  Mexico: {
    "Mexico/BajaNorte": ["BajaNorte", "-08:00", "-07:00"],
    "Mexico/BajaSur": ["BajaSur", "-07:00", "-06:00"],
    "Mexico/General": ["General", "-06:00", "-05:00"]
  },
  Pacific: {
    "Pacific/Apia": ["Apia", "+13:00", "+14:00"],
    "Pacific/Auckland": ["Auckland", "+12:00", "+13:00"],
    "Pacific/Chatham": ["Chatham", "+12:45", "+13:45"],
    "Pacific/Chuuk": ["Chuuk", "+10:00", "+10:00"],
    "Pacific/Easter": ["Easter", "-06:00", "-05:00"],
    "Pacific/Efate": ["Efate", "+11:00", "+11:00"],
    "Pacific/Enderbury": ["Enderbury", "+13:00", "+13:00"],
    "Pacific/Fakaofo": ["Fakaofo", "+13:00", "+13:00"],
    "Pacific/Fiji": ["Fiji", "+12:00", "+13:00"],
    "Pacific/Funafuti": ["Funafuti", "+12:00", "+12:00"],
    "Pacific/Galapagos": ["Galapagos", "-06:00", "-06:00"],
    "Pacific/Gambier": ["Gambier", "-09:00", "-09:00"],
    "Pacific/Guadalcanal": ["Guadalcanal", "+11:00", "+11:00"],
    "Pacific/Guam": ["Guam", "+10:00", "+10:00"],
    "Pacific/Honolulu": ["Honolulu", "-10:00", "-10:00"],
    "Pacific/Johnston": ["Johnston", "-10:00", "-10:00"],
    "Pacific/Kiritimati": ["Kiritimati", "+14:00", "+14:00"],
    "Pacific/Kosrae": ["Kosrae", "+11:00", "+11:00"],
    "Pacific/Kwajalein": ["Kwajalein", "+12:00", "+12:00"],
    "Pacific/Majuro": ["Majuro", "+12:00", "+12:00"],
    "Pacific/Marquesas": ["Marquesas", "-09:30", "-09:30"],
    "Pacific/Midway": ["Midway", "-11:00", "-11:00"],
    "Pacific/Nauru": ["Nauru", "+12:00", "+12:00"],
    "Pacific/Niue": ["Niue", "-11:00", "-11:00"],
    "Pacific/Norfolk": ["Norfolk", "+11:30", "+11:30"],
    "Pacific/Noumea": ["Noumea", "+11:00", "+11:00"],
    "Pacific/Pago_Pago": ["Pago Pago", "-11:00", "-11:00"],
    "Pacific/Palau": ["Palau", "+09:00", "+09:00"],
    "Pacific/Pitcairn": ["Pitcairn", "-08:00", "-08:00"],
    "Pacific/Pohnpei": ["Pohnpei", "+11:00", "+11:00"],
    "Pacific/Ponape": ["Ponape", "+11:00", "+11:00"],
    "Pacific/Port_Moresby": ["Port Moresby", "+10:00", "+10:00"],
    "Pacific/Rarotonga": ["Rarotonga", "-10:00", "-10:00"],
    "Pacific/Saipan": ["Saipan", "+10:00", "+10:00"],
    "Pacific/Samoa": ["Samoa", "-11:00", "-11:00"],
    "Pacific/Tahiti": ["Tahiti", "-10:00", "-10:00"],
    "Pacific/Tarawa": ["Tarawa", "+12:00", "+12:00"],
    "Pacific/Tongatapu": ["Tongatapu", "+13:00", "+13:00"],
    "Pacific/Truk": ["Truk", "+10:00", "+10:00"],
    "Pacific/Wake": ["Wake", "+12:00", "+12:00"],
    "Pacific/Wallis": ["Wallis", "+12:00", "+12:00"],
    "Pacific/Yap": ["Yap", "+10:00", "+10:00"]
  },
  US: {
    "US/Alaska": ["Alaska", "-09:00", "-08:00"],
    "US/Aleutian": ["Aleutian", "-10:00", "-09:00"],
    "US/Arizona": ["Arizona", "-07:00", "-07:00"],
    "US/Central": ["Central", "-06:00", "-05:00"],
    "US/East-Indiana": ["East-Indiana", "-05:00", "-04:00"],
    "US/Eastern": ["Eastern", "-05:00", "-04:00"],
    "US/Hawaii": ["Hawaii", "-10:00", "-10:00"],
    "US/Indiana-Starke": ["Indiana-Starke", "-06:00", "-05:00"],
    "US/Michigan": ["Michigan", "-05:00", "-04:00"],
    "US/Mountain": ["Mountain", "-07:00", "-06:00"],
    "US/Pacific": ["Pacific", "-08:00", "-07:00"],
    "US/Samoa": ["Samoa", "-11:00", "-11:00"]
  }
};
var timezones_default = timezones;

// node_modules/compute-scroll-into-view/dist/index.mjs
function t(t2) {
  return "object" == typeof t2 && null != t2 && 1 === t2.nodeType;
}
function e(t2, e2) {
  return (!e2 || "hidden" !== t2) && "visible" !== t2 && "clip" !== t2;
}
function n(t2, n2) {
  if (t2.clientHeight < t2.scrollHeight || t2.clientWidth < t2.scrollWidth) {
    var r2 = getComputedStyle(t2, null);
    return e(r2.overflowY, n2) || e(r2.overflowX, n2) || function(t3) {
      var e2 = function(t4) {
        if (!t4.ownerDocument || !t4.ownerDocument.defaultView)
          return null;
        try {
          return t4.ownerDocument.defaultView.frameElement;
        } catch (t5) {
          return null;
        }
      }(t3);
      return !!e2 && (e2.clientHeight < t3.scrollHeight || e2.clientWidth < t3.scrollWidth);
    }(t2);
  }
  return false;
}
function r(t2, e2, n2, r2, i2, o, l, d) {
  return o < t2 && l > e2 || o > t2 && l < e2 ? 0 : o <= t2 && d <= n2 || l >= e2 && d >= n2 ? o - t2 - r2 : l > e2 && d < n2 || o < t2 && d > n2 ? l - e2 + i2 : 0;
}
var i = function(e2, i2) {
  var o = window, l = i2.scrollMode, d = i2.block, f = i2.inline, h = i2.boundary, u = i2.skipOverflowHiddenElements, s = "function" == typeof h ? h : function(t2) {
    return t2 !== h;
  };
  if (!t(e2))
    throw new TypeError("Invalid target");
  for (var a, c, g = document.scrollingElement || document.documentElement, p = [], m = e2; t(m) && s(m); ) {
    if ((m = null == (c = (a = m).parentElement) ? a.getRootNode().host || null : c) === g) {
      p.push(m);
      break;
    }
    null != m && m === document.body && n(m) && !n(document.documentElement) || null != m && n(m, u) && p.push(m);
  }
  for (var w = o.visualViewport ? o.visualViewport.width : innerWidth, v = o.visualViewport ? o.visualViewport.height : innerHeight, W = window.scrollX || pageXOffset, H = window.scrollY || pageYOffset, b = e2.getBoundingClientRect(), y = b.height, E = b.width, M = b.top, V = b.right, x = b.bottom, I = b.left, C = "start" === d || "nearest" === d ? M : "end" === d ? x : M + y / 2, R = "center" === f ? I + E / 2 : "end" === f ? V : I, T = [], k = 0; k < p.length; k++) {
    var B = p[k], D = B.getBoundingClientRect(), O = D.height, X = D.width, Y = D.top, L = D.right, S = D.bottom, j = D.left;
    if ("if-needed" === l && M >= 0 && I >= 0 && x <= v && V <= w && M >= Y && x <= S && I >= j && V <= L)
      return T;
    var N = getComputedStyle(B), q = parseInt(N.borderLeftWidth, 10), z = parseInt(N.borderTopWidth, 10), A = parseInt(N.borderRightWidth, 10), F = parseInt(N.borderBottomWidth, 10), G = 0, J = 0, K = "offsetWidth" in B ? B.offsetWidth - B.clientWidth - q - A : 0, P = "offsetHeight" in B ? B.offsetHeight - B.clientHeight - z - F : 0, Q = "offsetWidth" in B ? 0 === B.offsetWidth ? 0 : X / B.offsetWidth : 0, U = "offsetHeight" in B ? 0 === B.offsetHeight ? 0 : O / B.offsetHeight : 0;
    if (g === B)
      G = "start" === d ? C : "end" === d ? C - v : "nearest" === d ? r(H, H + v, v, z, F, H + C, H + C + y, y) : C - v / 2, J = "start" === f ? R : "center" === f ? R - w / 2 : "end" === f ? R - w : r(W, W + w, w, q, A, W + R, W + R + E, E), G = Math.max(0, G + H), J = Math.max(0, J + W);
    else {
      G = "start" === d ? C - Y - z : "end" === d ? C - S + F + P : "nearest" === d ? r(Y, S, O, z, F + P, C, C + y, y) : C - (Y + O / 2) + P / 2, J = "start" === f ? R - j - q : "center" === f ? R - (j + X / 2) + K / 2 : "end" === f ? R - L + A + K : r(j, L, X, q, A + K, R, R + E, E);
      var Z = B.scrollLeft, $ = B.scrollTop;
      C += $ - (G = Math.max(0, Math.min($ + G / U, B.scrollHeight - O / U + P))), R += Z - (J = Math.max(0, Math.min(Z + J / Q, B.scrollWidth - X / Q + K)));
    }
    T.push({ el: B, top: G, left: J });
  }
  return T;
};

// node_modules/svelte-timezone-picker/src/utils.js
var IDX = 36;
var HEX = "";
while (IDX--) {
  HEX += IDX.toString(36);
}
var uid = (len) => {
  let str = "";
  let num = len || 11;
  while (num--) {
    str += HEX[Math.random() * 36 | 0];
  }
  return str;
};
var scrollIntoView = (node, rootNode) => {
  if (node === null) {
    return;
  }
  const actions = i(node, {
    boundary: rootNode,
    block: "center",
    scrollMode: "if-needed"
  });
  actions.forEach(({ el, top }) => {
    el.scrollTop = top;
  });
};
var slugify = (str) => str.toString().toLowerCase().trim().replace(/[^\w\s-]/g, "").replace(/[\s_-]+/g, "-").replace(/^-+|-+$/g, "");
var keyCodes = {
  Enter: 13,
  Escape: 27,
  Space: 32,
  ArrowDown: 40,
  ArrowUp: 38,
  Backspace: 8,
  Characters: [
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90
  ]
};
var pick = (timezones2, selection) => {
  const unique = Array.from(/* @__PURE__ */ new Set([...selection]));
  return Object.keys(timezones2).reduce((zones, zoneName) => {
    const picked = unique.includes(zoneName) ? timezones2[zoneName] : {};
    return {
      ...zones,
      ...Object.keys(picked).length > 0 && { [zoneName]: picked }
    };
  }, {});
};
var ungroup = (timezones2) => Object.values(timezones2).reduce(
  (values, zone) => ({ ...values, ...zone }),
  {}
);
var filter = (search, zoneGroups) => Object.entries(zoneGroups).reduce((zones, [zone, details]) => {
  if (details[0].toLowerCase().includes(search.toLowerCase())) {
    zones.push(zone);
  }
  return zones;
}, []);

// node_modules/svelte-timezone-picker/src/Picker.svelte
var { Object: Object_1, console: console_1 } = globals;
var file = "node_modules/svelte-timezone-picker/src/Picker.svelte";
function add_css(target) {
  append_styles(target, "svelte-10al0e4", ".overlay.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{background:transparent;height:100vh;left:0;position:fixed;top:0;width:100vw;z-index:0}button.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{background:transparent;border:0;cursor:pointer}svg.svelte-10al0e4 polygon.svelte-10al0e4.svelte-10al0e4{fill:var(--color-info-900, #076196)}button[data-toggle].svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{align-content:flex-start;align-items:center;display:flex;padding:0}button[data-toggle].svelte-10al0e4>span.svelte-10al0e4.svelte-10al0e4{color:var(--color-info-900, #076196);font-weight:500;margin-right:0.4em;text-decoration:underline}button[data-toggle].svelte-10al0e4>span small.svelte-10al0e4.svelte-10al0e4{font-weight:400;font-size:0.8em}.tz-dropdown.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{background-color:var(--color-white, #fff);border:1px solid var(--color-gray-100, rgba(0, 0, 0, 0.2));box-shadow:0 1px 6px 0 var(--color-gray-100, rgba(0, 0, 0, 0.2));border-radius:4px;display:flex;flex-direction:column;min-width:18em;max-width:100vw;position:absolute;z-index:50}.tz-groups.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{height:240px;max-height:40vh;overflow:scroll}ul.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{margin:0;list-style:none inside none;padding:0}ul.svelte-10al0e4 li.svelte-10al0e4.svelte-10al0e4{font-size:0.9rem;display:block;margin:0;padding:0}ul.svelte-10al0e4 li.svelte-10al0e4>span.svelte-10al0e4{font-size:0.8em;line-height:1.4em;text-align:right}ul.svelte-10al0e4 li p.svelte-10al0e4.svelte-10al0e4{color:var(--color-gray-900, #292929);font-size:0.92rem;font-weight:600;letter-spacing:0.08em;margin:0;padding:0;text-transform:uppercase}ul.svelte-10al0e4 li.svelte-10al0e4.svelte-10al0e4{background:transparent;border:0;color:var(--color-gray-600, #757575);display:flex;justify-content:space-between;padding:0.8em 1.2em;text-align:left}ul.svelte-10al0e4 li[aria-selected].svelte-10al0e4.svelte-10al0e4:hover,ul.svelte-10al0e4 li.svelte-10al0e4.svelte-10al0e4:focus,li[aria-selected='true'].svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{background:var(--color-info-900, #076196);color:#fff;cursor:pointer}.input-group.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{display:flex;position:relative}.input-group.svelte-10al0e4>button.svelte-10al0e4.svelte-10al0e4{position:absolute;top:1.1em;right:0.8em}input.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{border:1px solid var(--color-gray-400, #acacac);border-radius:4px;box-shadow:0 2px 4px rgba(0, 0, 0, 0.12);margin:0.4em;padding:0.6em 1.6em 0.6em 0.4em;width:calc(100% - 0.8em)}input.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4::-webkit-search-cancel-button{display:none}.sr-only.svelte-10al0e4.svelte-10al0e4.svelte-10al0e4{border:0;clip:'rect(0, 0, 0, 0)';height:1px;margin:-1px;opacity:0;overflow:hidden;padding:0;position:absolute;width:1px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGlja2VyLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiMndGQTZnQkEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiUGlja2VyLnN2ZWx0ZSJdfQ== */");
}
function get_each_context(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[42] = list[i2];
  return child_ctx;
}
function get_each_context_1(ctx, list, i2) {
  const child_ctx = ctx.slice();
  child_ctx[45] = list[i2][0];
  child_ctx[46] = list[i2][1];
  child_ctx[47] = list;
  child_ctx[48] = i2;
  return child_ctx;
}
function create_if_block_4(ctx) {
  let div;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "overlay svelte-10al0e4");
      add_location(div, file, 292, 2, 9332);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (!mounted) {
        dispose = listen_dev(div, "click", ctx[13], false, false, false);
        mounted = true;
      }
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_4.name,
    type: "if",
    source: "(292:0) {#if expanded}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let div1;
  let span;
  let t0;
  let t1;
  let div0;
  let input;
  let t2;
  let t3;
  let ul;
  let ul_aria_activedescendant_value;
  let div1_transition;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[1] && ctx[1].length > 0 && create_if_block_3(ctx);
  let each_value = Object.keys(timezones_default);
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value.length; i2 += 1) {
    each_blocks[i2] = create_each_block(get_each_context(ctx, each_value, i2));
  }
  const block = {
    c: function create() {
      div1 = element("div");
      span = element("span");
      t0 = text("Select a timezone from the list. Start typing to filter or use the arrow\n      keys to navigate the list");
      t1 = space();
      div0 = element("div");
      input = element("input");
      t2 = space();
      if (if_block)
        if_block.c();
      t3 = space();
      ul = element("ul");
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      div1 = claim_element(nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span = claim_element(div1_nodes, "SPAN", { class: true, id: true });
      var span_nodes = children(span);
      t0 = claim_text(span_nodes, "Select a timezone from the list. Start typing to filter or use the arrow\n      keys to navigate the list");
      span_nodes.forEach(detach_dev);
      t1 = claim_space(div1_nodes);
      div0 = claim_element(div1_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      input = claim_element(div0_nodes, "INPUT", {
        id: true,
        type: true,
        "aria-autocomplete": true,
        "aria-controls": true,
        "aria-labelledby": true,
        autocomplete: true,
        autocorrect: true,
        placeholder: true,
        class: true
      });
      t2 = claim_space(div0_nodes);
      if (if_block)
        if_block.l(div0_nodes);
      div0_nodes.forEach(detach_dev);
      t3 = claim_space(div1_nodes);
      ul = claim_element(div1_nodes, "UL", {
        tabindex: true,
        class: true,
        id: true,
        role: true,
        "aria-labelledby": true,
        "aria-activedescendant": true
      });
      var ul_nodes = children(ul);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(ul_nodes);
      }
      ul_nodes.forEach(detach_dev);
      div1_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "sr-only svelte-10al0e4");
      attr_dev(span, "id", ctx[10]);
      add_location(span, file, 317, 4, 10069);
      attr_dev(input, "id", ctx[12]);
      attr_dev(input, "type", "search");
      attr_dev(input, "aria-autocomplete", "list");
      attr_dev(input, "aria-controls", ctx[11]);
      attr_dev(input, "aria-labelledby", ctx[10]);
      attr_dev(input, "autocomplete", "off");
      attr_dev(input, "autocorrect", "off");
      attr_dev(input, "placeholder", "Search...");
      input.autofocus = true;
      attr_dev(input, "class", "svelte-10al0e4");
      add_location(input, file, 323, 6, 10310);
      attr_dev(div0, "class", "input-group svelte-10al0e4");
      add_location(div0, file, 321, 4, 10234);
      attr_dev(ul, "tabindex", "-1");
      attr_dev(ul, "class", "tz-groups svelte-10al0e4");
      attr_dev(ul, "id", ctx[11]);
      attr_dev(ul, "role", "listbox");
      attr_dev(ul, "aria-labelledby", ctx[10]);
      attr_dev(ul, "aria-activedescendant", ul_aria_activedescendant_value = ctx[2] && `tz-${slugify(ctx[2][0])}`);
      add_location(ul, file, 348, 4, 10905);
      attr_dev(div1, "class", "tz-dropdown svelte-10al0e4");
      add_location(div1, file, 311, 2, 9944);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div1, anchor);
      append_hydration_dev(div1, span);
      append_hydration_dev(span, t0);
      append_hydration_dev(div1, t1);
      append_hydration_dev(div1, div0);
      append_hydration_dev(div0, input);
      ctx[25](input);
      set_input_value(input, ctx[1]);
      append_hydration_dev(div0, t2);
      if (if_block)
        if_block.m(div0, null);
      append_hydration_dev(div1, t3);
      append_hydration_dev(div1, ul);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(ul, null);
      }
      ctx[31](ul);
      current = true;
      input.focus();
      if (!mounted) {
        dispose = [
          listen_dev(input, "input", ctx[26]),
          listen_dev(div1, "introend", ctx[20], false, false, false),
          listen_dev(div1, "keydown", ctx[16], false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & 2) {
        set_input_value(input, ctx2[1]);
      }
      if (ctx2[1] && ctx2[1].length > 0) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_3(ctx2);
          if_block.c();
          if_block.m(div0, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty[0] & 312072) {
        each_value = Object.keys(timezones_default);
        validate_each_argument(each_value);
        let i2;
        for (i2 = 0; i2 < each_value.length; i2 += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(ul, null);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (!current || dirty[0] & 4 && ul_aria_activedescendant_value !== (ul_aria_activedescendant_value = ctx2[2] && `tz-${slugify(ctx2[2][0])}`)) {
        attr_dev(ul, "aria-activedescendant", ul_aria_activedescendant_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      add_render_callback(() => {
        if (!div1_transition)
          div1_transition = create_bidirectional_transition(div1, slide, {}, true);
        div1_transition.run(1);
      });
      current = true;
    },
    o: function outro(local) {
      if (!div1_transition)
        div1_transition = create_bidirectional_transition(div1, slide, {}, false);
      div1_transition.run(0);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      ctx[25](null);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
      ctx[31](null);
      if (detaching && div1_transition)
        div1_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(311:0) {#if expanded}",
    ctx
  });
  return block;
}
function create_if_block_3(ctx) {
  let button;
  let t2;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      button = element("button");
      t2 = text("\xD7");
      this.h();
    },
    l: function claim(nodes) {
      button = claim_element(nodes, "BUTTON", { title: true, class: true });
      var button_nodes = children(button);
      t2 = claim_text(button_nodes, "\xD7");
      button_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(button, "title", "Clear search text");
      attr_dev(button, "class", "svelte-10al0e4");
      add_location(button, file, 338, 8, 10713);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, button, anchor);
      append_hydration_dev(button, t2);
      ctx[27](button);
      if (!mounted) {
        dispose = listen_dev(button, "click", ctx[17], false, false, false);
        mounted = true;
      }
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(button);
      ctx[27](null);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(338:6) {#if userSearch && userSearch.length > 0}",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let li;
  let p;
  let t0_value = ctx[42] + "";
  let t0;
  let t1;
  let each_1_anchor;
  let each_value_1 = Object.entries(timezones_default[ctx[42]]);
  validate_each_argument(each_value_1);
  let each_blocks = [];
  for (let i2 = 0; i2 < each_value_1.length; i2 += 1) {
    each_blocks[i2] = create_each_block_1(get_each_context_1(ctx, each_value_1, i2));
  }
  const block = {
    c: function create() {
      li = element("li");
      p = element("p");
      t0 = text(t0_value);
      t1 = space();
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].c();
      }
      each_1_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", {
        role: true,
        "aria-hidden": true,
        "aria-selected": true,
        class: true
      });
      var li_nodes = children(li);
      p = claim_element(li_nodes, "P", { class: true });
      var p_nodes = children(p);
      t0 = claim_text(p_nodes, t0_value);
      p_nodes.forEach(detach_dev);
      li_nodes.forEach(detach_dev);
      t1 = claim_space(nodes);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].l(nodes);
      }
      each_1_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(p, "class", "svelte-10al0e4");
      add_location(p, file, 360, 12, 11338);
      attr_dev(li, "role", "option");
      attr_dev(li, "aria-hidden", "true");
      attr_dev(li, "aria-selected", "false");
      attr_dev(li, "class", "svelte-10al0e4");
      add_location(li, file, 359, 10, 11266);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, p);
      append_hydration_dev(p, t0);
      insert_hydration_dev(target, t1, anchor);
      for (let i2 = 0; i2 < each_blocks.length; i2 += 1) {
        each_blocks[i2].m(target, anchor);
      }
      insert_hydration_dev(target, each_1_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & 279304) {
        each_value_1 = Object.entries(timezones_default[ctx2[42]]);
        validate_each_argument(each_value_1);
        let i2;
        for (i2 = 0; i2 < each_value_1.length; i2 += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i2);
          if (each_blocks[i2]) {
            each_blocks[i2].p(child_ctx, dirty);
          } else {
            each_blocks[i2] = create_each_block_1(child_ctx);
            each_blocks[i2].c();
            each_blocks[i2].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i2 < each_blocks.length; i2 += 1) {
          each_blocks[i2].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(li);
      if (detaching)
        detach_dev(t1);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach_dev(each_1_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(359:8) {#if groupHasVisibleChildren(group, filteredZones)}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let li;
  let t0_value = ctx[46][0] + "";
  let t0;
  let t1;
  let span;
  let t2;
  let t3_value = ctx[46][1] + "";
  let t3;
  let t4;
  let li_id_value;
  let li_aria_label_value;
  let li_aria_selected_value;
  let zoneLabel = ctx[45];
  let mounted;
  let dispose;
  const assign_li = () => ctx[28](li, zoneLabel);
  const unassign_li = () => ctx[28](null, zoneLabel);
  function mouseover_handler() {
    return ctx[29](ctx[46]);
  }
  function click_handler(...args) {
    return ctx[30](ctx[45], ...args);
  }
  const block = {
    c: function create() {
      li = element("li");
      t0 = text(t0_value);
      t1 = space();
      span = element("span");
      t2 = text("GMT ");
      t3 = text(t3_value);
      t4 = space();
      this.h();
    },
    l: function claim(nodes) {
      li = claim_element(nodes, "LI", {
        role: true,
        tabindex: true,
        id: true,
        "aria-label": true,
        "aria-selected": true,
        class: true
      });
      var li_nodes = children(li);
      t0 = claim_text(li_nodes, t0_value);
      t1 = claim_space(li_nodes);
      span = claim_element(li_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t2 = claim_text(span_nodes, "GMT ");
      t3 = claim_text(span_nodes, t3_value);
      span_nodes.forEach(detach_dev);
      t4 = claim_space(li_nodes);
      li_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(span, "class", "svelte-10al0e4");
      add_location(span, file, 374, 33, 12012);
      attr_dev(li, "role", "option");
      attr_dev(li, "tabindex", "0");
      attr_dev(li, "id", li_id_value = `tz-${slugify(ctx[45])}`);
      attr_dev(li, "aria-label", li_aria_label_value = `Select ${ctx[46][0]}`);
      attr_dev(li, "aria-selected", li_aria_selected_value = ctx[3] === ctx[46][0]);
      attr_dev(li, "class", "svelte-10al0e4");
      add_location(li, file, 364, 14, 11517);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, li, anchor);
      append_hydration_dev(li, t0);
      append_hydration_dev(li, t1);
      append_hydration_dev(li, span);
      append_hydration_dev(span, t2);
      append_hydration_dev(span, t3);
      append_hydration_dev(li, t4);
      assign_li();
      if (!mounted) {
        dispose = [
          listen_dev(li, "mouseover", mouseover_handler, false, false, false),
          listen_dev(li, "click", click_handler, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & 8 && li_aria_selected_value !== (li_aria_selected_value = ctx[3] === ctx[46][0])) {
        attr_dev(li, "aria-selected", li_aria_selected_value);
      }
      if (zoneLabel !== ctx[45]) {
        unassign_li();
        zoneLabel = ctx[45];
        assign_li();
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(li);
      unassign_li();
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(364:12) {#if filteredZones.includes(zoneLabel)}",
    ctx
  });
  return block;
}
function create_each_block_1(ctx) {
  let show_if = ctx[9].includes(ctx[45]);
  let if_block_anchor;
  let if_block = show_if && create_if_block_2(ctx);
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & 512)
        show_if = ctx2[9].includes(ctx2[45]);
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_2(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(363:10) {#each Object.entries(groupedZones[group]) as [zoneLabel, zoneDetails]}",
    ctx
  });
  return block;
}
function create_each_block(ctx) {
  let show_if = ctx[15](ctx[42], ctx[9]);
  let if_block_anchor;
  let if_block = show_if && create_if_block_1(ctx);
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & 512)
        show_if = ctx2[15](ctx2[42], ctx2[9]);
      if (show_if) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(358:6) {#each Object.keys(groupedZones) as group}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let t0;
  let button;
  let span;
  let t1_value = ctx[2][0] + "";
  let t1;
  let t2;
  let small;
  let t3;
  let t4_value = ctx[2][1] + "";
  let t4;
  let t5;
  let svg;
  let polygon;
  let polygon_transform_value;
  let button_aria_label_value;
  let t6;
  let if_block1_anchor;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[0] && create_if_block_4(ctx);
  let if_block1 = ctx[0] && create_if_block(ctx);
  const block = {
    c: function create() {
      if (if_block0)
        if_block0.c();
      t0 = space();
      button = element("button");
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      small = element("small");
      t3 = text("GMT ");
      t4 = text(t4_value);
      t5 = space();
      svg = svg_element("svg");
      polygon = svg_element("polygon");
      t6 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      if (if_block0)
        if_block0.l(nodes);
      t0 = claim_space(nodes);
      button = claim_element(nodes, "BUTTON", {
        type: true,
        "aria-label": true,
        "aria-haspopup": true,
        "data-toggle": true,
        "aria-expanded": true,
        class: true
      });
      var button_nodes = children(button);
      span = claim_element(button_nodes, "SPAN", { class: true });
      var span_nodes = children(span);
      t1 = claim_text(span_nodes, t1_value);
      t2 = claim_space(span_nodes);
      small = claim_element(span_nodes, "SMALL", { class: true });
      var small_nodes = children(small);
      t3 = claim_text(small_nodes, "GMT ");
      t4 = claim_text(small_nodes, t4_value);
      small_nodes.forEach(detach_dev);
      span_nodes.forEach(detach_dev);
      t5 = claim_space(button_nodes);
      svg = claim_svg_element(button_nodes, "svg", {
        width: true,
        height: true,
        viewBox: true,
        class: true
      });
      var svg_nodes = children(svg);
      polygon = claim_svg_element(svg_nodes, "polygon", {
        x: true,
        y: true,
        points: true,
        transform: true,
        class: true
      });
      children(polygon).forEach(detach_dev);
      svg_nodes.forEach(detach_dev);
      button_nodes.forEach(detach_dev);
      t6 = claim_space(nodes);
      if (if_block1)
        if_block1.l(nodes);
      if_block1_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(small, "class", "svelte-10al0e4");
      add_location(small, file, 305, 25, 9683);
      attr_dev(span, "class", "svelte-10al0e4");
      add_location(span, file, 305, 2, 9660);
      attr_dev(polygon, "x", "0");
      attr_dev(polygon, "y", "0");
      attr_dev(polygon, "points", "8, 8, 16, 16, 0, 16");
      attr_dev(polygon, "transform", polygon_transform_value = (ctx[0] ? "rotate(0)" : "rotate(180, 8, 8)") + " translate(0 -4)");
      attr_dev(polygon, "class", "svelte-10al0e4");
      add_location(polygon, file, 307, 4, 9781);
      attr_dev(svg, "width", "10");
      attr_dev(svg, "height", "16");
      attr_dev(svg, "viewBox", "0 0 16 16");
      attr_dev(svg, "class", "svelte-10al0e4");
      add_location(svg, file, 306, 2, 9728);
      attr_dev(button, "type", "button");
      attr_dev(button, "aria-label", button_aria_label_value = `${ctx[2][0]} is currently selected. Change timezone`);
      attr_dev(button, "aria-haspopup", "listbox");
      attr_dev(button, "data-toggle", "true");
      attr_dev(button, "aria-expanded", ctx[0]);
      attr_dev(button, "class", "svelte-10al0e4");
      add_location(button, file, 295, 0, 9386);
    },
    m: function mount(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert_hydration_dev(target, t0, anchor);
      insert_hydration_dev(target, button, anchor);
      append_hydration_dev(button, span);
      append_hydration_dev(span, t1);
      append_hydration_dev(span, t2);
      append_hydration_dev(span, small);
      append_hydration_dev(small, t3);
      append_hydration_dev(small, t4);
      append_hydration_dev(button, t5);
      append_hydration_dev(button, svg);
      append_hydration_dev(svg, polygon);
      ctx[24](button);
      insert_hydration_dev(target, t6, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_hydration_dev(target, if_block1_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(button, "click", ctx[19], false, false, false),
          listen_dev(button, "keydown", ctx[19], false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (ctx2[0]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_4(ctx2);
          if_block0.c();
          if_block0.m(t0.parentNode, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if ((!current || dirty[0] & 4) && t1_value !== (t1_value = ctx2[2][0] + ""))
        set_data_dev(t1, t1_value);
      if ((!current || dirty[0] & 4) && t4_value !== (t4_value = ctx2[2][1] + ""))
        set_data_dev(t4, t4_value);
      if (!current || dirty[0] & 1 && polygon_transform_value !== (polygon_transform_value = (ctx2[0] ? "rotate(0)" : "rotate(180, 8, 8)") + " translate(0 -4)")) {
        attr_dev(polygon, "transform", polygon_transform_value);
      }
      if (!current || dirty[0] & 4 && button_aria_label_value !== (button_aria_label_value = `${ctx2[2][0]} is currently selected. Change timezone`)) {
        attr_dev(button, "aria-label", button_aria_label_value);
      }
      if (!current || dirty[0] & 1) {
        attr_dev(button, "aria-expanded", ctx2[0]);
      }
      if (ctx2[0]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & 1) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block1);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block1);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach_dev(t0);
      if (detaching)
        detach_dev(button);
      ctx[24](null);
      if (detaching)
        detach_dev(t6);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach_dev(if_block1_anchor);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Picker", slots, []);
  let { timezone = null } = $$props;
  let { expanded = false } = $$props;
  let { allowedTimezones = null } = $$props;
  let currentZone;
  let userSearch;
  let highlightedZone;
  let toggleButtonRef;
  let searchInputRef;
  let clearButtonRef;
  let listBoxRef;
  let listBoxOptionRefs;
  const labelId = uid();
  const listBoxId = uid();
  const searchInputId = uid();
  const ungroupedZones = ungroup(timezones_default);
  const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  let availableZones = ungroupedZones;
  if (allowedTimezones) {
    if (Array.isArray(allowedTimezones)) {
      availableZones = pick(ungroupedZones, [...allowedTimezones, userTimezone]);
    } else {
      console.error("You need to provide a list of timezones as an Array!", `You provided ${allowedTimezones}.`);
    }
  }
  const validZones = Object.keys(availableZones);
  let filteredZones = [];
  listBoxOptionRefs = Object.values(availableZones).map(([zone]) => ({ [zone]: null }));
  const initialState = { expanded, userSearch: null };
  const reset = () => {
    $$invalidate(0, expanded = initialState.expanded);
    $$invalidate(1, userSearch = initialState.userSearch);
  };
  const dispatch = createEventDispatcher();
  const component = get_current_component();
  const dispatchUpdates = () => {
    const eventName = "update";
    const eventData = { timezone };
    const customEvent = new CustomEvent(
      eventName,
      {
        detail: eventData,
        bubbles: true,
        cancelable: true,
        composed: true
      }
    );
    component.dispatchEvent && component.dispatchEvent(customEvent);
    dispatch(eventName, eventData);
  };
  const handleTimezoneUpdate = (ev, zoneId) => {
    $$invalidate(2, currentZone = ungroupedZones[zoneId]);
    $$invalidate(21, timezone = zoneId);
    dispatchUpdates();
    reset();
    toggleButtonRef.focus();
    ev.preventDefault();
  };
  const groupHasVisibleChildren = (group, zones) => Object.keys(timezones_default[group]).some((zone) => zones.includes(zone));
  const scrollList = (zone) => {
    const zoneElementRef = listBoxOptionRefs[zone];
    if (listBoxRef && zoneElementRef) {
      scrollIntoView(zoneElementRef, listBoxRef);
      zoneElementRef.focus({ preventScroll: true });
    }
  };
  const moveSelection = (direction) => {
    const len = filteredZones.length;
    const zoneIndex = filteredZones.findIndex((zone) => zone === highlightedZone);
    let index;
    if (direction === "up") {
      index = (zoneIndex - 1 + len) % len;
    }
    if (direction === "down") {
      index = (zoneIndex + 1) % len;
    }
    $$invalidate(3, highlightedZone = filteredZones[index]);
    scrollList(highlightedZone);
  };
  const keyDown = (ev) => {
    if (document.activeElement === clearButtonRef || !expanded) {
      return;
    }
    if (ev.keyCode === keyCodes.Escape) {
      reset();
    }
    if (ev.keyCode === keyCodes.ArrowDown) {
      ev.preventDefault();
      moveSelection("down");
    }
    if (ev.keyCode === keyCodes.ArrowUp) {
      ev.preventDefault();
      moveSelection("up");
    }
    if (ev.keyCode === keyCodes.Enter && highlightedZone) {
      handleTimezoneUpdate(ev, highlightedZone);
    }
    if (keyCodes.Characters.includes(ev.keyCode) || ev.keyCode === keyCodes.Backspace) {
      searchInputRef.focus();
    }
  };
  const clearSearch = () => {
    $$invalidate(1, userSearch = initialState.userSearch);
    searchInputRef.focus();
  };
  const setHighlightedZone = (zone) => {
    $$invalidate(3, highlightedZone = zone);
  };
  const toggleExpanded = (ev) => {
    if (ev.keyCode) {
      if ([keyCodes.Enter, keyCodes.Space].includes(ev.keyCode)) {
        $$invalidate(0, expanded = !expanded);
      }
      if (ev.keyCode === keyCodes.Escape) {
        $$invalidate(0, expanded = false);
      }
      if (ev.keyCode === keyCodes.ArrowDown) {
        $$invalidate(0, expanded = true);
      }
    } else {
      $$invalidate(0, expanded = !expanded);
    }
  };
  const scrollToHighlighted = () => {
    if (expanded && highlightedZone) {
      scrollList(highlightedZone);
    }
  };
  const setTimezone = (tz) => {
    if (!tz) {
      $$invalidate(21, timezone = userTimezone);
    }
    if (tz && !validZones.includes(tz)) {
      console.warn(`The timezone provided is not valid: ${tz}!`, `Valid zones are: ${validZones}`);
      $$invalidate(21, timezone = userTimezone);
    }
    $$invalidate(2, currentZone = ungroupedZones[timezone]);
    setHighlightedZone(timezone);
  };
  onMount(() => {
    setTimezone(timezone);
    scrollToHighlighted();
  });
  const writable_props = ["timezone", "expanded", "allowedTimezones"];
  Object_1.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_1.warn(`<Picker> was created with unknown prop '${key}'`);
  });
  function button_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      toggleButtonRef = $$value;
      $$invalidate(4, toggleButtonRef);
    });
  }
  function input_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      searchInputRef = $$value;
      $$invalidate(5, searchInputRef);
    });
  }
  function input_input_handler() {
    userSearch = this.value;
    $$invalidate(1, userSearch);
  }
  function button_binding_1($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      clearButtonRef = $$value;
      $$invalidate(6, clearButtonRef);
    });
  }
  function li_binding($$value, zoneLabel) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      listBoxOptionRefs[zoneLabel] = $$value;
      $$invalidate(8, listBoxOptionRefs);
    });
  }
  const mouseover_handler = (zoneDetails) => setHighlightedZone(zoneDetails[0]);
  const click_handler = (zoneLabel, ev) => handleTimezoneUpdate(ev, zoneLabel);
  function ul_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      listBoxRef = $$value;
      $$invalidate(7, listBoxRef);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("timezone" in $$props2)
      $$invalidate(21, timezone = $$props2.timezone);
    if ("expanded" in $$props2)
      $$invalidate(0, expanded = $$props2.expanded);
    if ("allowedTimezones" in $$props2)
      $$invalidate(22, allowedTimezones = $$props2.allowedTimezones);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher,
    onMount,
    get_current_component,
    slide,
    groupedZones: timezones_default,
    scrollIntoView,
    uid,
    slugify,
    keyCodes,
    ungroup,
    filter,
    pick,
    timezone,
    expanded,
    allowedTimezones,
    currentZone,
    userSearch,
    highlightedZone,
    toggleButtonRef,
    searchInputRef,
    clearButtonRef,
    listBoxRef,
    listBoxOptionRefs,
    labelId,
    listBoxId,
    searchInputId,
    ungroupedZones,
    userTimezone,
    availableZones,
    validZones,
    filteredZones,
    initialState,
    reset,
    dispatch,
    component,
    dispatchUpdates,
    handleTimezoneUpdate,
    groupHasVisibleChildren,
    scrollList,
    moveSelection,
    keyDown,
    clearSearch,
    setHighlightedZone,
    toggleExpanded,
    scrollToHighlighted,
    setTimezone
  });
  $$self.$inject_state = ($$props2) => {
    if ("timezone" in $$props2)
      $$invalidate(21, timezone = $$props2.timezone);
    if ("expanded" in $$props2)
      $$invalidate(0, expanded = $$props2.expanded);
    if ("allowedTimezones" in $$props2)
      $$invalidate(22, allowedTimezones = $$props2.allowedTimezones);
    if ("currentZone" in $$props2)
      $$invalidate(2, currentZone = $$props2.currentZone);
    if ("userSearch" in $$props2)
      $$invalidate(1, userSearch = $$props2.userSearch);
    if ("highlightedZone" in $$props2)
      $$invalidate(3, highlightedZone = $$props2.highlightedZone);
    if ("toggleButtonRef" in $$props2)
      $$invalidate(4, toggleButtonRef = $$props2.toggleButtonRef);
    if ("searchInputRef" in $$props2)
      $$invalidate(5, searchInputRef = $$props2.searchInputRef);
    if ("clearButtonRef" in $$props2)
      $$invalidate(6, clearButtonRef = $$props2.clearButtonRef);
    if ("listBoxRef" in $$props2)
      $$invalidate(7, listBoxRef = $$props2.listBoxRef);
    if ("listBoxOptionRefs" in $$props2)
      $$invalidate(8, listBoxOptionRefs = $$props2.listBoxOptionRefs);
    if ("availableZones" in $$props2)
      $$invalidate(23, availableZones = $$props2.availableZones);
    if ("filteredZones" in $$props2)
      $$invalidate(9, filteredZones = $$props2.filteredZones);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 8388610) {
      $:
        $$invalidate(9, filteredZones = userSearch && userSearch.length > 0 ? filter(userSearch, availableZones) : validZones.slice());
    }
    if ($$self.$$.dirty[0] & 2097152) {
      $:
        setTimezone(timezone);
    }
  };
  return [
    expanded,
    userSearch,
    currentZone,
    highlightedZone,
    toggleButtonRef,
    searchInputRef,
    clearButtonRef,
    listBoxRef,
    listBoxOptionRefs,
    filteredZones,
    labelId,
    listBoxId,
    searchInputId,
    reset,
    handleTimezoneUpdate,
    groupHasVisibleChildren,
    keyDown,
    clearSearch,
    setHighlightedZone,
    toggleExpanded,
    scrollToHighlighted,
    timezone,
    allowedTimezones,
    availableZones,
    button_binding,
    input_binding,
    input_input_handler,
    button_binding_1,
    li_binding,
    mouseover_handler,
    click_handler,
    ul_binding
  ];
}
var Picker = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        timezone: 21,
        expanded: 0,
        allowedTimezones: 22
      },
      add_css,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Picker",
      options,
      id: create_fragment.name
    });
  }
  get timezone() {
    throw new Error("<Picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set timezone(value) {
    throw new Error("<Picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get expanded() {
    throw new Error("<Picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set expanded(value) {
    throw new Error("<Picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get allowedTimezones() {
    throw new Error("<Picker>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set allowedTimezones(value) {
    throw new Error("<Picker>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Picker_default = Picker;

// node_modules/svelte-timezone-picker/src/index.js
var src_default = Picker_default;
export {
  src_default as default
};
//# sourceMappingURL=svelte-timezone-picker.js.map
